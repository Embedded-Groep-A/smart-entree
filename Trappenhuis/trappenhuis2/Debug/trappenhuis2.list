
trappenhuis2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004234  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080043c8  080043c8  000053c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004400  08004400  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004400  08004400  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004400  08004400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004404  08004404  00005404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004408  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000140  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dbad  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d3e  00000000  00000000  00013be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  00015928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a1  00000000  00000000  00016570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200ee  00000000  00000000  00016f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010011  00000000  00000000  00036fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c66bf  00000000  00000000  00047010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010d6cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003344  00000000  00000000  0010d714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00110a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080043b0 	.word	0x080043b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080043b0 	.word	0x080043b0

080001d4 <button_init>:
#include "button.h"

#define BUTTON_PIN GPIO_PIN_10  // Pas dit aan op basis van je GPIO-pin (PA10 in plaats van PA1)
#define BUTTON_PORT GPIOB       // Port voor PA10

void button_init(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
    // Configureer de knop als input
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = BUTTON_PIN;
 80001e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001ec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001f2:	2301      	movs	r3, #1
 80001f4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4619      	mov	r1, r3
 80001fa:	4803      	ldr	r0, [pc, #12]	@ (8000208 <button_init+0x34>)
 80001fc:	f000 fd48 	bl	8000c90 <HAL_GPIO_Init>
}
 8000200:	bf00      	nop
 8000202:	3718      	adds	r7, #24
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	48000400 	.word	0x48000400

0800020c <button_is_pressed>:

uint8_t button_is_pressed(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
    // Retourneer of de knop ingedrukt is (je kunt een UART print toevoegen om te debuggen)
	uint8_t waardeButton = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)==GPIO_PIN_SET ? 1:0;
 8000212:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000216:	4807      	ldr	r0, [pc, #28]	@ (8000234 <button_is_pressed+0x28>)
 8000218:	f000 fec4 	bl	8000fa4 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	2b01      	cmp	r3, #1
 8000220:	bf0c      	ite	eq
 8000222:	2301      	moveq	r3, #1
 8000224:	2300      	movne	r3, #0
 8000226:	b2db      	uxtb	r3, r3
 8000228:	71fb      	strb	r3, [r7, #7]
     	 return waardeButton;
 800022a:	79fb      	ldrb	r3, [r7, #7]


}
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	48000400 	.word	0x48000400

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f000 fbdb 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f839 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f000 f9d1 	bl	80005ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800024a:	f000 f99f 	bl	800058c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800024e:	f000 f897 	bl	8000380 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000252:	f000 f925 	bl	80004a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  button_init();
 8000256:	f7ff ffbd 	bl	80001d4 <button_init>
  motion_sensor_init();
 800025a:	f000 fa33 	bl	80006c4 <motion_sensor_init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800025e:	2100      	movs	r1, #0
 8000260:	4814      	ldr	r0, [pc, #80]	@ (80002b4 <main+0x7c>)
 8000262:	f002 fbcf 	bl	8002a04 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   uint8_t buttonPressed = button_is_pressed();
 8000266:	f7ff ffd1 	bl	800020c <button_is_pressed>
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	    uint8_t motionDetected = motionSensor_detect();
 800026e:	f000 fa44 	bl	80006fa <motionSensor_detect>
 8000272:	4603      	mov	r3, r0
 8000274:	71bb      	strb	r3, [r7, #6]

	    if (motionDetected || !buttonPressed)
 8000276:	79bb      	ldrb	r3, [r7, #6]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d102      	bne.n	8000282 <main+0x4a>
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d10b      	bne.n	800029a <main+0x62>
	    {
	        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2000); // Servo naar positie
 8000282:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <main+0x7c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800028a:	635a      	str	r2, [r3, #52]	@ 0x34
	        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // LED aan
 800028c:	2200      	movs	r2, #0
 800028e:	2120      	movs	r1, #32
 8000290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000294:	f000 fe9e 	bl	8000fd4 <HAL_GPIO_WritePin>
 8000298:	e00a      	b.n	80002b0 <main+0x78>


	    }else{
	        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000); // Servo terug
 800029a:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <main+0x7c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002a2:	635a      	str	r2, [r3, #52]	@ 0x34
	        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // LED uit
 80002a4:	2201      	movs	r2, #1
 80002a6:	2120      	movs	r1, #32
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ac:	f000 fe92 	bl	8000fd4 <HAL_GPIO_WritePin>
  {
 80002b0:	e7d9      	b.n	8000266 <main+0x2e>
 80002b2:	bf00      	nop
 80002b4:	20000074 	.word	0x20000074

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b0a6      	sub	sp, #152	@ 0x98
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 f845 	bl	8004356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2258      	movs	r2, #88	@ 0x58
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f004 f837 	bl	8004356 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e8:	2302      	movs	r3, #2
 80002ea:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	2310      	movs	r3, #16
 80002f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f6:	2302      	movs	r3, #2
 80002f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000300:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000304:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000308:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fe74 	bl	8001004 <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000322:	f000 f9c9 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	2302      	movs	r3, #2
 800032c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000336:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fe82 	bl	800204c <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800034e:	f000 f9b3 	bl	80006b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000352:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <SystemClock_Config+0xc4>)
 8000354:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800035a:	2300      	movs	r3, #0
 800035c:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800035e:	2300      	movs	r3, #0
 8000360:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f002 f883 	bl	8002470 <HAL_RCCEx_PeriphCLKConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000370:	f000 f9a2 	bl	80006b8 <Error_Handler>
  }
}
 8000374:	bf00      	nop
 8000376:	3798      	adds	r7, #152	@ 0x98
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	00101002 	.word	0x00101002

08000380 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b096      	sub	sp, #88	@ 0x58
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000386:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000392:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
 80003a0:	611a      	str	r2, [r3, #16]
 80003a2:	615a      	str	r2, [r3, #20]
 80003a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	222c      	movs	r2, #44	@ 0x2c
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 ffd2 	bl	8004356 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b2:	4b39      	ldr	r3, [pc, #228]	@ (8000498 <MX_TIM1_Init+0x118>)
 80003b4:	4a39      	ldr	r2, [pc, #228]	@ (800049c <MX_TIM1_Init+0x11c>)
 80003b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80003b8:	4b37      	ldr	r3, [pc, #220]	@ (8000498 <MX_TIM1_Init+0x118>)
 80003ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c0:	4b35      	ldr	r3, [pc, #212]	@ (8000498 <MX_TIM1_Init+0x118>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80003c6:	4b34      	ldr	r3, [pc, #208]	@ (8000498 <MX_TIM1_Init+0x118>)
 80003c8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80003cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ce:	4b32      	ldr	r3, [pc, #200]	@ (8000498 <MX_TIM1_Init+0x118>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d4:	4b30      	ldr	r3, [pc, #192]	@ (8000498 <MX_TIM1_Init+0x118>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003da:	4b2f      	ldr	r3, [pc, #188]	@ (8000498 <MX_TIM1_Init+0x118>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003e0:	482d      	ldr	r0, [pc, #180]	@ (8000498 <MX_TIM1_Init+0x118>)
 80003e2:	f002 fab8 	bl	8002956 <HAL_TIM_PWM_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80003ec:	f000 f964 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f0:	2300      	movs	r3, #0
 80003f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003f4:	2300      	movs	r3, #0
 80003f6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000400:	4619      	mov	r1, r3
 8000402:	4825      	ldr	r0, [pc, #148]	@ (8000498 <MX_TIM1_Init+0x118>)
 8000404:	f003 fa58 	bl	80038b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800040e:	f000 f953 	bl	80006b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000412:	2360      	movs	r3, #96	@ 0x60
 8000414:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800041a:	2300      	movs	r3, #0
 800041c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800041e:	2300      	movs	r3, #0
 8000420:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000422:	2300      	movs	r3, #0
 8000424:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000426:	2300      	movs	r3, #0
 8000428:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800042a:	2300      	movs	r3, #0
 800042c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000432:	2200      	movs	r2, #0
 8000434:	4619      	mov	r1, r3
 8000436:	4818      	ldr	r0, [pc, #96]	@ (8000498 <MX_TIM1_Init+0x118>)
 8000438:	f002 fbf0 	bl	8002c1c <HAL_TIM_PWM_ConfigChannel>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000442:	f000 f939 	bl	80006b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800044a:	2300      	movs	r3, #0
 800044c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800045a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800045e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000468:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800046c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000472:	2300      	movs	r3, #0
 8000474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4619      	mov	r1, r3
 800047a:	4807      	ldr	r0, [pc, #28]	@ (8000498 <MX_TIM1_Init+0x118>)
 800047c:	f003 faa8 	bl	80039d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000486:	f000 f917 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800048a:	4803      	ldr	r0, [pc, #12]	@ (8000498 <MX_TIM1_Init+0x118>)
 800048c:	f000 f9ac 	bl	80007e8 <HAL_TIM_MspPostInit>

}
 8000490:	bf00      	nop
 8000492:	3758      	adds	r7, #88	@ 0x58
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000028 	.word	0x20000028
 800049c:	40012c00 	.word	0x40012c00

080004a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08e      	sub	sp, #56	@ 0x38
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b4:	f107 031c 	add.w	r3, r7, #28
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c0:	463b      	mov	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000588 <MX_TIM2_Init+0xe8>)
 80004d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80004da:	4b2b      	ldr	r3, [pc, #172]	@ (8000588 <MX_TIM2_Init+0xe8>)
 80004dc:	2247      	movs	r2, #71	@ 0x47
 80004de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e0:	4b29      	ldr	r3, [pc, #164]	@ (8000588 <MX_TIM2_Init+0xe8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80004e6:	4b28      	ldr	r3, [pc, #160]	@ (8000588 <MX_TIM2_Init+0xe8>)
 80004e8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80004ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ee:	4b26      	ldr	r3, [pc, #152]	@ (8000588 <MX_TIM2_Init+0xe8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f4:	4b24      	ldr	r3, [pc, #144]	@ (8000588 <MX_TIM2_Init+0xe8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004fa:	4823      	ldr	r0, [pc, #140]	@ (8000588 <MX_TIM2_Init+0xe8>)
 80004fc:	f002 f9d4 	bl	80028a8 <HAL_TIM_Base_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000506:	f000 f8d7 	bl	80006b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800050a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800050e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000510:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000514:	4619      	mov	r1, r3
 8000516:	481c      	ldr	r0, [pc, #112]	@ (8000588 <MX_TIM2_Init+0xe8>)
 8000518:	f002 fc94 	bl	8002e44 <HAL_TIM_ConfigClockSource>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000522:	f000 f8c9 	bl	80006b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000526:	4818      	ldr	r0, [pc, #96]	@ (8000588 <MX_TIM2_Init+0xe8>)
 8000528:	f002 fa15 	bl	8002956 <HAL_TIM_PWM_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000532:	f000 f8c1 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	4619      	mov	r1, r3
 8000544:	4810      	ldr	r0, [pc, #64]	@ (8000588 <MX_TIM2_Init+0xe8>)
 8000546:	f003 f9b7 	bl	80038b8 <HAL_TIMEx_MasterConfigSynchronization>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000550:	f000 f8b2 	bl	80006b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000554:	2360      	movs	r3, #96	@ 0x60
 8000556:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	4619      	mov	r1, r3
 800056a:	4807      	ldr	r0, [pc, #28]	@ (8000588 <MX_TIM2_Init+0xe8>)
 800056c:	f002 fb56 	bl	8002c1c <HAL_TIM_PWM_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000576:	f000 f89f 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800057a:	4803      	ldr	r0, [pc, #12]	@ (8000588 <MX_TIM2_Init+0xe8>)
 800057c:	f000 f934 	bl	80007e8 <HAL_TIM_MspPostInit>

}
 8000580:	bf00      	nop
 8000582:	3738      	adds	r7, #56	@ 0x38
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000074 	.word	0x20000074

0800058c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000590:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 8000592:	4a15      	ldr	r2, [pc, #84]	@ (80005e8 <MX_USART2_UART_Init+0x5c>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000596:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 8000598:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005d0:	f003 fa84 	bl	8003adc <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005da:	f000 f86d 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000c0 	.word	0x200000c0
 80005e8:	40004400 	.word	0x40004400

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a2a      	ldr	r2, [pc, #168]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 8000608:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a24      	ldr	r2, [pc, #144]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 8000620:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a1e      	ldr	r2, [pc, #120]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a18      	ldr	r2, [pc, #96]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 8000650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <MX_GPIO_Init+0xc4>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066a:	f000 fcb3 	bl	8000fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000674:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <MX_GPIO_Init+0xc8>)
 8000686:	f000 fb03 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800068a:	2320      	movs	r3, #32
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a4:	f000 faf4 	bl	8000c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006a8:	bf00      	nop
 80006aa:	3728      	adds	r7, #40	@ 0x28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000800 	.word	0x48000800

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <Error_Handler+0x8>

080006c4 <motion_sensor_init>:
#include "motionSensor.h"

#define MOTION_SENSOR_PIN GPIO_PIN_10  // Pas dit aan op basis van je GPIO-pin
#define MOTION_SENSOR_PORT GPIOA

void motion_sensor_init(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = MOTION_SENSOR_PIN;
 80006d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006dc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006e2:	2302      	movs	r3, #2
 80006e4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(MOTION_SENSOR_PORT, &GPIO_InitStruct);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ee:	f000 facf 	bl	8000c90 <HAL_GPIO_Init>
}
 80006f2:	bf00      	nop
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <motionSensor_detect>:


uint8_t motionSensor_detect(void) {
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
    // Retourneer of er beweging gedetecteerd is (bijv. logische 1 als er beweging is)

    		uint8_t waardeMotion = HAL_GPIO_ReadPin(MOTION_SENSOR_PORT, MOTION_SENSOR_PIN)==GPIO_PIN_SET ? 1:0;;
 8000700:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000708:	f000 fc4c 	bl	8000fa4 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	bf0c      	ite	eq
 8000712:	2301      	moveq	r3, #1
 8000714:	2300      	movne	r3, #0
 8000716:	b2db      	uxtb	r3, r3
 8000718:	71fb      	strb	r3, [r7, #7]
    		return waardeMotion;
 800071a:	79fb      	ldrb	r3, [r7, #7]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <HAL_MspInit+0x44>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4a0e      	ldr	r2, [pc, #56]	@ (8000768 <HAL_MspInit+0x44>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6193      	str	r3, [r2, #24]
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <HAL_MspInit+0x44>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <HAL_MspInit+0x44>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <HAL_MspInit+0x44>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <HAL_MspInit+0x44>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800075a:	2007      	movs	r0, #7
 800075c:	f000 fa64 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <HAL_TIM_PWM_MspInit+0x38>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d10b      	bne.n	8000796 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800077e:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a09      	ldr	r2, [pc, #36]	@ (80007a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000784:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40012c00 	.word	0x40012c00
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007bc:	d10b      	bne.n	80007d6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <HAL_TIM_Base_MspInit+0x38>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <HAL_TIM_Base_MspInit+0x38>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	61d3      	str	r3, [r2, #28]
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_TIM_Base_MspInit+0x38>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a23      	ldr	r2, [pc, #140]	@ (8000894 <HAL_TIM_MspPostInit+0xac>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d11e      	bne.n	8000848 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <HAL_TIM_MspPostInit+0xb0>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a22      	ldr	r2, [pc, #136]	@ (8000898 <HAL_TIM_MspPostInit+0xb0>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <HAL_TIM_MspPostInit+0xb0>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000822:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000834:	2306      	movs	r3, #6
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000842:	f000 fa25 	bl	8000c90 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000846:	e021      	b.n	800088c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000850:	d11c      	bne.n	800088c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <HAL_TIM_MspPostInit+0xb0>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a10      	ldr	r2, [pc, #64]	@ (8000898 <HAL_TIM_MspPostInit+0xb0>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <HAL_TIM_MspPostInit+0xb0>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086a:	2301      	movs	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800087a:	2301      	movs	r3, #1
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000888:	f000 fa02 	bl	8000c90 <HAL_GPIO_Init>
}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	@ 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40012c00 	.word	0x40012c00
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a17      	ldr	r2, [pc, #92]	@ (8000918 <HAL_UART_MspInit+0x7c>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d128      	bne.n	8000910 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_UART_MspInit+0x80>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a16      	ldr	r2, [pc, #88]	@ (800091c <HAL_UART_MspInit+0x80>)
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <HAL_UART_MspInit+0x80>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_UART_MspInit+0x80>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a10      	ldr	r2, [pc, #64]	@ (800091c <HAL_UART_MspInit+0x80>)
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <HAL_UART_MspInit+0x80>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ee:	230c      	movs	r3, #12
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fe:	2307      	movs	r3, #7
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090c:	f000 f9c0 	bl	8000c90 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	@ 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40004400 	.word	0x40004400
 800091c:	40021000 	.word	0x40021000

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <NMI_Handler+0x4>

08000928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <MemManage_Handler+0x4>

08000938 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <UsageFault_Handler+0x4>

08000948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000976:	f000 f885 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	@ (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a8:	f7ff ffea 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	@ (80009e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	@ (80009f0 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d2:	f003 fcc9 	bl	8004368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009d6:	f7ff fc2f 	bl	8000238 <main>

080009da <LoopForever>:

LoopForever:
    b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e8:	08004408 	.word	0x08004408
  ldr r2, =_sbss
 80009ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f0:	2000014c 	.word	0x2000014c

080009f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_2_IRQHandler>
	...

080009f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <HAL_Init+0x28>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	@ (8000a20 <HAL_Init+0x28>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f90d 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 f808 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff fe86 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40022000 	.word	0x40022000

08000a24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_InitTick+0x54>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_InitTick+0x58>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f917 	bl	8000c76 <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00e      	b.n	8000a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d80a      	bhi.n	8000a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 f8ed 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4a06      	ldr	r2, [pc, #24]	@ (8000a80 <HAL_InitTick+0x5c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000148 	.word	0x20000148

08000aac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000148 	.word	0x20000148

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	@ (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	@ (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	@ 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	@ 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f7ff ff8e 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff47 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff5c 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff8e 	bl	8000b7c <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffb0 	bl	8000be4 <SysTick_Config>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b087      	sub	sp, #28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9e:	e160      	b.n	8000f62 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 8152 	beq.w	8000f5c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d005      	beq.n	8000cd0 <HAL_GPIO_Init+0x40>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d130      	bne.n	8000d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d06:	2201      	movs	r2, #1
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	f003 0201 	and.w	r2, r3, #1
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d017      	beq.n	8000d6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d123      	bne.n	8000dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	220f      	movs	r2, #15
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	691a      	ldr	r2, [r3, #16]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	6939      	ldr	r1, [r7, #16]
 8000dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0203 	and.w	r2, r3, #3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 80ac 	beq.w	8000f5c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e04:	4b5e      	ldr	r3, [pc, #376]	@ (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a5d      	ldr	r2, [pc, #372]	@ (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b5b      	ldr	r3, [pc, #364]	@ (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e1c:	4a59      	ldr	r2, [pc, #356]	@ (8000f84 <HAL_GPIO_Init+0x2f4>)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e46:	d025      	beq.n	8000e94 <HAL_GPIO_Init+0x204>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a4f      	ldr	r2, [pc, #316]	@ (8000f88 <HAL_GPIO_Init+0x2f8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d01f      	beq.n	8000e90 <HAL_GPIO_Init+0x200>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a4e      	ldr	r2, [pc, #312]	@ (8000f8c <HAL_GPIO_Init+0x2fc>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d019      	beq.n	8000e8c <HAL_GPIO_Init+0x1fc>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8000f90 <HAL_GPIO_Init+0x300>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d013      	beq.n	8000e88 <HAL_GPIO_Init+0x1f8>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a4c      	ldr	r2, [pc, #304]	@ (8000f94 <HAL_GPIO_Init+0x304>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00d      	beq.n	8000e84 <HAL_GPIO_Init+0x1f4>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a4b      	ldr	r2, [pc, #300]	@ (8000f98 <HAL_GPIO_Init+0x308>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d007      	beq.n	8000e80 <HAL_GPIO_Init+0x1f0>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a4a      	ldr	r2, [pc, #296]	@ (8000f9c <HAL_GPIO_Init+0x30c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d101      	bne.n	8000e7c <HAL_GPIO_Init+0x1ec>
 8000e78:	2306      	movs	r3, #6
 8000e7a:	e00c      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	e00a      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e80:	2305      	movs	r3, #5
 8000e82:	e008      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e84:	2304      	movs	r3, #4
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e004      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e94:	2300      	movs	r3, #0
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4093      	lsls	r3, r2
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea6:	4937      	ldr	r1, [pc, #220]	@ (8000f84 <HAL_GPIO_Init+0x2f4>)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8000fa0 <HAL_GPIO_Init+0x310>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed8:	4a31      	ldr	r2, [pc, #196]	@ (8000fa0 <HAL_GPIO_Init+0x310>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ede:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <HAL_GPIO_Init+0x310>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f02:	4a27      	ldr	r2, [pc, #156]	@ (8000fa0 <HAL_GPIO_Init+0x310>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f08:	4b25      	ldr	r3, [pc, #148]	@ (8000fa0 <HAL_GPIO_Init+0x310>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa0 <HAL_GPIO_Init+0x310>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <HAL_GPIO_Init+0x310>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f56:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <HAL_GPIO_Init+0x310>)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f47f ae97 	bne.w	8000ca0 <HAL_GPIO_Init+0x10>
  }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010000 	.word	0x40010000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	48000c00 	.word	0x48000c00
 8000f94:	48001000 	.word	0x48001000
 8000f98:	48001400 	.word	0x48001400
 8000f9c:	48001800 	.word	0x48001800
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e001      	b.n	8000fc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800100a:	af00      	add	r7, sp, #0
 800100c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001010:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001014:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001016:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800101a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	f001 b80a 	b.w	800203e <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800102e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8161 	beq.w	8001302 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001040:	4bae      	ldr	r3, [pc, #696]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b04      	cmp	r3, #4
 800104a:	d00c      	beq.n	8001066 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800104c:	4bab      	ldr	r3, [pc, #684]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b08      	cmp	r3, #8
 8001056:	d157      	bne.n	8001108 <HAL_RCC_OscConfig+0x104>
 8001058:	4ba8      	ldr	r3, [pc, #672]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001064:	d150      	bne.n	8001108 <HAL_RCC_OscConfig+0x104>
 8001066:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800106a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800107a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107e:	fab3 f383 	clz	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b3f      	cmp	r3, #63	@ 0x3f
 8001086:	d802      	bhi.n	800108e <HAL_RCC_OscConfig+0x8a>
 8001088:	4b9c      	ldr	r3, [pc, #624]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	e015      	b.n	80010ba <HAL_RCC_OscConfig+0xb6>
 800108e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001092:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80010a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010a6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80010aa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80010b6:	4b91      	ldr	r3, [pc, #580]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010be:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80010c2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80010c6:	fa92 f2a2 	rbit	r2, r2
 80010ca:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80010ce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80010d2:	fab2 f282 	clz	r2, r2
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	f042 0220 	orr.w	r2, r2, #32
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	f002 021f 	and.w	r2, r2, #31
 80010e2:	2101      	movs	r1, #1
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8108 	beq.w	8001300 <HAL_RCC_OscConfig+0x2fc>
 80010f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f040 80ff 	bne.w	8001300 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	f000 bf9b 	b.w	800203e <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800110c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001118:	d106      	bne.n	8001128 <HAL_RCC_OscConfig+0x124>
 800111a:	4b78      	ldr	r3, [pc, #480]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a77      	ldr	r2, [pc, #476]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e036      	b.n	8001196 <HAL_RCC_OscConfig+0x192>
 8001128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800112c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10c      	bne.n	8001152 <HAL_RCC_OscConfig+0x14e>
 8001138:	4b70      	ldr	r3, [pc, #448]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a6f      	ldr	r2, [pc, #444]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b6d      	ldr	r3, [pc, #436]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a6c      	ldr	r2, [pc, #432]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e021      	b.n	8001196 <HAL_RCC_OscConfig+0x192>
 8001152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001156:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001162:	d10c      	bne.n	800117e <HAL_RCC_OscConfig+0x17a>
 8001164:	4b65      	ldr	r3, [pc, #404]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a64      	ldr	r2, [pc, #400]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 800116a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b62      	ldr	r3, [pc, #392]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a61      	ldr	r2, [pc, #388]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 8001176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	e00b      	b.n	8001196 <HAL_RCC_OscConfig+0x192>
 800117e:	4b5f      	ldr	r3, [pc, #380]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a5e      	ldr	r2, [pc, #376]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 8001184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b5c      	ldr	r3, [pc, #368]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a5b      	ldr	r2, [pc, #364]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 8001190:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001194:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001196:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800119a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d054      	beq.n	8001250 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fc81 	bl	8000aac <HAL_GetTick>
 80011aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fc7c 	bl	8000aac <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b64      	cmp	r3, #100	@ 0x64
 80011be:	d902      	bls.n	80011c6 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f000 bf3c 	b.w	800203e <HAL_RCC_OscConfig+0x103a>
 80011c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011ca:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80011da:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	fab3 f383 	clz	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80011e6:	d802      	bhi.n	80011ee <HAL_RCC_OscConfig+0x1ea>
 80011e8:	4b44      	ldr	r3, [pc, #272]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	e015      	b.n	800121a <HAL_RCC_OscConfig+0x216>
 80011ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011f2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001202:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001206:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800120a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001216:	4b39      	ldr	r3, [pc, #228]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 8001218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800121e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001222:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001226:	fa92 f2a2 	rbit	r2, r2
 800122a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800122e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001232:	fab2 f282 	clz	r2, r2
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	f042 0220 	orr.w	r2, r2, #32
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	f002 021f 	and.w	r2, r2, #31
 8001242:	2101      	movs	r1, #1
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0b0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x1ac>
 800124e:	e058      	b.n	8001302 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fc2c 	bl	8000aac <HAL_GetTick>
 8001254:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001258:	e00a      	b.n	8001270 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125a:	f7ff fc27 	bl	8000aac <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	@ 0x64
 8001268:	d902      	bls.n	8001270 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	f000 bee7 	b.w	800203e <HAL_RCC_OscConfig+0x103a>
 8001270:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001274:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001278:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001284:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001288:	fab3 f383 	clz	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001290:	d802      	bhi.n	8001298 <HAL_RCC_OscConfig+0x294>
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	e015      	b.n	80012c4 <HAL_RCC_OscConfig+0x2c0>
 8001298:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800129c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80012a4:	fa93 f3a3 	rbit	r3, r3
 80012a8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80012ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012b0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80012b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80012b8:	fa93 f3a3 	rbit	r3, r3
 80012bc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <HAL_RCC_OscConfig+0x2f8>)
 80012c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012c8:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80012cc:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80012d0:	fa92 f2a2 	rbit	r2, r2
 80012d4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80012d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80012dc:	fab2 f282 	clz	r2, r2
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	f042 0220 	orr.w	r2, r2, #32
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	f002 021f 	and.w	r2, r2, #31
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1b0      	bne.n	800125a <HAL_RCC_OscConfig+0x256>
 80012f8:	e003      	b.n	8001302 <HAL_RCC_OscConfig+0x2fe>
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001306:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 816d 	beq.w	80015f2 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001318:	4bcd      	ldr	r3, [pc, #820]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00c      	beq.n	800133e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001324:	4bca      	ldr	r3, [pc, #808]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b08      	cmp	r3, #8
 800132e:	d16e      	bne.n	800140e <HAL_RCC_OscConfig+0x40a>
 8001330:	4bc7      	ldr	r3, [pc, #796]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800133c:	d167      	bne.n	800140e <HAL_RCC_OscConfig+0x40a>
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001350:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b3f      	cmp	r3, #63	@ 0x3f
 800135c:	d802      	bhi.n	8001364 <HAL_RCC_OscConfig+0x360>
 800135e:	4bbc      	ldr	r3, [pc, #752]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	e013      	b.n	800138c <HAL_RCC_OscConfig+0x388>
 8001364:	2302      	movs	r3, #2
 8001366:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800137c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001380:	fa93 f3a3 	rbit	r3, r3
 8001384:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001388:	4bb1      	ldr	r3, [pc, #708]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138c:	2202      	movs	r2, #2
 800138e:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001392:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001396:	fa92 f2a2 	rbit	r2, r2
 800139a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800139e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80013a2:	fab2 f282 	clz	r2, r2
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	f042 0220 	orr.w	r2, r2, #32
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	f002 021f 	and.w	r2, r2, #31
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f202 	lsl.w	r2, r1, r2
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00a      	beq.n	80013d4 <HAL_RCC_OscConfig+0x3d0>
 80013be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d002      	beq.n	80013d4 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f000 be35 	b.w	800203e <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b9e      	ldr	r3, [pc, #632]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	21f8      	movs	r1, #248	@ 0xf8
 80013ea:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80013f2:	fa91 f1a1 	rbit	r1, r1
 80013f6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80013fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80013fe:	fab1 f181 	clz	r1, r1
 8001402:	b2c9      	uxtb	r1, r1
 8001404:	408b      	lsls	r3, r1
 8001406:	4992      	ldr	r1, [pc, #584]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140c:	e0f1      	b.n	80015f2 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001412:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8083 	beq.w	8001526 <HAL_RCC_OscConfig+0x522>
 8001420:	2301      	movs	r3, #1
 8001422:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001432:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001440:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	461a      	mov	r2, r3
 8001448:	2301      	movs	r3, #1
 800144a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fb2e 	bl	8000aac <HAL_GetTick>
 8001450:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fb29 	bl	8000aac <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d902      	bls.n	800146c <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	f000 bde9 	b.w	800203e <HAL_RCC_OscConfig+0x103a>
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800147e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b3f      	cmp	r3, #63	@ 0x3f
 800148a:	d802      	bhi.n	8001492 <HAL_RCC_OscConfig+0x48e>
 800148c:	4b70      	ldr	r3, [pc, #448]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	e013      	b.n	80014ba <HAL_RCC_OscConfig+0x4b6>
 8001492:	2302      	movs	r3, #2
 8001494:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001498:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800149c:	fa93 f3a3 	rbit	r3, r3
 80014a0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80014aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80014ae:	fa93 f3a3 	rbit	r3, r3
 80014b2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80014b6:	4b66      	ldr	r3, [pc, #408]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 80014b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ba:	2202      	movs	r2, #2
 80014bc:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80014c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80014c4:	fa92 f2a2 	rbit	r2, r2
 80014c8:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80014cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80014d0:	fab2 f282 	clz	r2, r2
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	f042 0220 	orr.w	r2, r2, #32
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	f002 021f 	and.w	r2, r2, #31
 80014e0:	2101      	movs	r1, #1
 80014e2:	fa01 f202 	lsl.w	r2, r1, r2
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0b4      	beq.n	8001456 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b58      	ldr	r3, [pc, #352]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	21f8      	movs	r1, #248	@ 0xf8
 8001502:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800150a:	fa91 f1a1 	rbit	r1, r1
 800150e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001512:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001516:	fab1 f181 	clz	r1, r1
 800151a:	b2c9      	uxtb	r1, r1
 800151c:	408b      	lsls	r3, r1
 800151e:	494c      	ldr	r1, [pc, #304]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e065      	b.n	80015f2 <HAL_RCC_OscConfig+0x5ee>
 8001526:	2301      	movs	r3, #1
 8001528:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001530:	fa93 f3a3 	rbit	r3, r3
 8001534:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001538:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153c:	fab3 f383 	clz	r3, r3
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001546:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	461a      	mov	r2, r3
 800154e:	2300      	movs	r3, #0
 8001550:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff faab 	bl	8000aac <HAL_GetTick>
 8001556:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff faa6 	bl	8000aac <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d902      	bls.n	8001572 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	f000 bd66 	b.w	800203e <HAL_RCC_OscConfig+0x103a>
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001584:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001590:	d802      	bhi.n	8001598 <HAL_RCC_OscConfig+0x594>
 8001592:	4b2f      	ldr	r3, [pc, #188]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	e013      	b.n	80015c0 <HAL_RCC_OscConfig+0x5bc>
 8001598:	2302      	movs	r3, #2
 800159a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80015b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80015bc:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <HAL_RCC_OscConfig+0x64c>)
 80015be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c0:	2202      	movs	r2, #2
 80015c2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80015c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80015ca:	fa92 f2a2 	rbit	r2, r2
 80015ce:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80015d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80015d6:	fab2 f282 	clz	r2, r2
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	f042 0220 	orr.w	r2, r2, #32
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	f002 021f 	and.w	r2, r2, #31
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1b4      	bne.n	800155c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8119 	beq.w	800183a <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 8082 	beq.w	800171e <HAL_RCC_OscConfig+0x71a>
 800161a:	2301      	movs	r3, #1
 800161c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800162c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001630:	fab3 f383 	clz	r3, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_RCC_OscConfig+0x650>)
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	461a      	mov	r2, r3
 8001640:	2301      	movs	r3, #1
 8001642:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff fa32 	bl	8000aac <HAL_GetTick>
 8001648:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164c:	e00f      	b.n	800166e <HAL_RCC_OscConfig+0x66a>
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff fa28 	bl	8000aac <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d902      	bls.n	800166e <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	f000 bce8 	b.w	800203e <HAL_RCC_OscConfig+0x103a>
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001678:	fa93 f2a3 	rbit	r2, r3
 800167c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001680:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800168a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800168e:	2202      	movs	r2, #2
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	fa93 f2a3 	rbit	r2, r3
 80016a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016b2:	2202      	movs	r2, #2
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fa93 f2a3 	rbit	r2, r3
 80016c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80016cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	4bb0      	ldr	r3, [pc, #704]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 80016d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016da:	2102      	movs	r1, #2
 80016dc:	6019      	str	r1, [r3, #0]
 80016de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	fa93 f1a3 	rbit	r1, r3
 80016ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016f4:	6019      	str	r1, [r3, #0]
  return result;
 80016f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016fa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2101      	movs	r1, #1
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d09d      	beq.n	8001658 <HAL_RCC_OscConfig+0x654>
 800171c:	e08d      	b.n	800183a <HAL_RCC_OscConfig+0x836>
 800171e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001722:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	fa93 f2a3 	rbit	r2, r3
 8001738:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800173c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001740:	601a      	str	r2, [r3, #0]
  return result;
 8001742:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001746:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800174a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	4b8f      	ldr	r3, [pc, #572]	@ (8001994 <HAL_RCC_OscConfig+0x990>)
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	461a      	mov	r2, r3
 800175c:	2300      	movs	r3, #0
 800175e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff f9a4 	bl	8000aac <HAL_GetTick>
 8001764:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff f99f 	bl	8000aac <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d902      	bls.n	8001780 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	f000 bc5f 	b.w	800203e <HAL_RCC_OscConfig+0x103a>
 8001780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001784:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001788:	2202      	movs	r2, #2
 800178a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001790:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	fa93 f2a3 	rbit	r2, r3
 800179a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80017d0:	2202      	movs	r2, #2
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80017ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ec:	4b68      	ldr	r3, [pc, #416]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 80017ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017f8:	2102      	movs	r1, #2
 80017fa:	6019      	str	r1, [r3, #0]
 80017fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001800:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f1a3 	rbit	r1, r3
 800180a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001812:	6019      	str	r1, [r3, #0]
  return result;
 8001814:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001818:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	2101      	movs	r1, #1
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d197      	bne.n	800176a <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800183a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800183e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 819c 	beq.w	8001b88 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001856:	4b4e      	ldr	r3, [pc, #312]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d116      	bne.n	8001890 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b4b      	ldr	r3, [pc, #300]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a4a      	ldr	r2, [pc, #296]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b48      	ldr	r3, [pc, #288]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800187a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001884:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001888:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_RCC_OscConfig+0x994>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d11a      	bne.n	80018d2 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189c:	4b3e      	ldr	r3, [pc, #248]	@ (8001998 <HAL_RCC_OscConfig+0x994>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001998 <HAL_RCC_OscConfig+0x994>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a8:	f7ff f900 	bl	8000aac <HAL_GetTick>
 80018ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b2:	f7ff f8fb 	bl	8000aac <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	@ 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e3bb      	b.n	800203e <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c6:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <HAL_RCC_OscConfig+0x994>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0ef      	beq.n	80018b2 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d106      	bne.n	80018f0 <HAL_RCC_OscConfig+0x8ec>
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	e035      	b.n	800195c <HAL_RCC_OscConfig+0x958>
 80018f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10c      	bne.n	800191a <HAL_RCC_OscConfig+0x916>
 8001900:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a22      	ldr	r2, [pc, #136]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a1f      	ldr	r2, [pc, #124]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	e020      	b.n	800195c <HAL_RCC_OscConfig+0x958>
 800191a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b05      	cmp	r3, #5
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x940>
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	4a18      	ldr	r2, [pc, #96]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6213      	str	r3, [r2, #32]
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0x958>
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 800194a:	f023 0301 	bic.w	r3, r3, #1
 800194e:	6213      	str	r3, [r2, #32]
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a0e      	ldr	r2, [pc, #56]	@ (8001990 <HAL_RCC_OscConfig+0x98c>)
 8001956:	f023 0304 	bic.w	r3, r3, #4
 800195a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800195c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001960:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 8085 	beq.w	8001a78 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7ff f89d 	bl	8000aac <HAL_GetTick>
 8001972:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001976:	e011      	b.n	800199c <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff f898 	bl	8000aac <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d907      	bls.n	800199c <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e356      	b.n	800203e <HAL_RCC_OscConfig+0x103a>
 8001990:	40021000 	.word	0x40021000
 8001994:	10908120 	.word	0x10908120
 8001998:	40007000 	.word	0x40007000
 800199c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80019a4:	2202      	movs	r2, #2
 80019a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ac:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ba:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019de:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019e2:	601a      	str	r2, [r3, #0]
  return result;
 80019e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_RCC_OscConfig+0xa00>
 80019fe:	4b98      	ldr	r3, [pc, #608]	@ (8001c60 <HAL_RCC_OscConfig+0xc5c>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	e013      	b.n	8001a2c <HAL_RCC_OscConfig+0xa28>
 8001a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a08:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a14:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a22:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	4b8d      	ldr	r3, [pc, #564]	@ (8001c60 <HAL_RCC_OscConfig+0xc5c>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a30:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001a34:	2102      	movs	r1, #2
 8001a36:	6011      	str	r1, [r2, #0]
 8001a38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a3c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	fa92 f1a2 	rbit	r1, r2
 8001a46:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a4a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001a4e:	6011      	str	r1, [r2, #0]
  return result;
 8001a50:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a54:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	fab2 f282 	clz	r2, r2
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f002 021f 	and.w	r2, r2, #31
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d080      	beq.n	8001978 <HAL_RCC_OscConfig+0x974>
 8001a76:	e07d      	b.n	8001b74 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff f818 	bl	8000aac <HAL_GetTick>
 8001a7c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	e00b      	b.n	8001a9a <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff f813 	bl	8000aac <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e2d1      	b.n	800203e <HAL_RCC_OscConfig+0x103a>
 8001a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aaa:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	fa93 f2a3 	rbit	r2, r3
 8001ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ace:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001adc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ae0:	601a      	str	r2, [r3, #0]
  return result;
 8001ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001aea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <HAL_RCC_OscConfig+0xafe>
 8001afc:	4b58      	ldr	r3, [pc, #352]	@ (8001c60 <HAL_RCC_OscConfig+0xc5c>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	e013      	b.n	8001b2a <HAL_RCC_OscConfig+0xb26>
 8001b02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b06:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b12:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b20:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	4b4e      	ldr	r3, [pc, #312]	@ (8001c60 <HAL_RCC_OscConfig+0xc5c>)
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b2e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001b32:	2102      	movs	r1, #2
 8001b34:	6011      	str	r1, [r2, #0]
 8001b36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b3a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	fa92 f1a2 	rbit	r1, r2
 8001b44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b48:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001b4c:	6011      	str	r1, [r2, #0]
  return result;
 8001b4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b52:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fab2 f282 	clz	r2, r2
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f002 021f 	and.w	r2, r2, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d186      	bne.n	8001a82 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b74:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7c:	4b38      	ldr	r3, [pc, #224]	@ (8001c60 <HAL_RCC_OscConfig+0xc5c>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	4a37      	ldr	r2, [pc, #220]	@ (8001c60 <HAL_RCC_OscConfig+0xc5c>)
 8001b82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8251 	beq.w	800203c <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9a:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <HAL_RCC_OscConfig+0xc5c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	f000 820f 	beq.w	8001fc6 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	f040 8165 	bne.w	8001e84 <HAL_RCC_OscConfig+0xe80>
 8001bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bbe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001bc2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bcc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	fa93 f2a3 	rbit	r2, r3
 8001bd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bda:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bde:	601a      	str	r2, [r3, #0]
  return result;
 8001be0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001be8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bf4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7fe ff54 	bl	8000aac <HAL_GetTick>
 8001c04:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c08:	e009      	b.n	8001c1e <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7fe ff4f 	bl	8000aac <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e20f      	b.n	800203e <HAL_RCC_OscConfig+0x103a>
 8001c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c22:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c30:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f2a3 	rbit	r2, r3
 8001c3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c42:	601a      	str	r2, [r3, #0]
  return result;
 8001c44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c48:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c56:	d805      	bhi.n	8001c64 <HAL_RCC_OscConfig+0xc60>
 8001c58:	4b01      	ldr	r3, [pc, #4]	@ (8001c60 <HAL_RCC_OscConfig+0xc5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	e02a      	b.n	8001cb4 <HAL_RCC_OscConfig+0xcb0>
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c68:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c76:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	fa93 f2a3 	rbit	r2, r3
 8001c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c84:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001c92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	fa93 f2a3 	rbit	r2, r3
 8001ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001caa:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4bca      	ldr	r3, [pc, #808]	@ (8001fdc <HAL_RCC_OscConfig+0xfd8>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cb8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001cbc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cc0:	6011      	str	r1, [r2, #0]
 8001cc2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cc6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	fa92 f1a2 	rbit	r1, r2
 8001cd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cd4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001cd8:	6011      	str	r1, [r2, #0]
  return result;
 8001cda:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cde:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	fab2 f282 	clz	r2, r2
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	f042 0220 	orr.w	r2, r2, #32
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f002 021f 	and.w	r2, r2, #31
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d184      	bne.n	8001c0a <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d00:	4bb6      	ldr	r3, [pc, #728]	@ (8001fdc <HAL_RCC_OscConfig+0xfd8>)
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	f023 020f 	bic.w	r2, r3, #15
 8001d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d14:	49b1      	ldr	r1, [pc, #708]	@ (8001fdc <HAL_RCC_OscConfig+0xfd8>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001d1a:	4bb0      	ldr	r3, [pc, #704]	@ (8001fdc <HAL_RCC_OscConfig+0xfd8>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001d22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6a19      	ldr	r1, [r3, #32]
 8001d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	49a7      	ldr	r1, [pc, #668]	@ (8001fdc <HAL_RCC_OscConfig+0xfd8>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
 8001d42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d46:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d4a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d54:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d62:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d66:	601a      	str	r2, [r3, #0]
  return result;
 8001d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d70:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d7c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	461a      	mov	r2, r3
 8001d84:	2301      	movs	r3, #1
 8001d86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7fe fe90 	bl	8000aac <HAL_GetTick>
 8001d8c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	e009      	b.n	8001da6 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe fe8b 	bl	8000aac <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e14b      	b.n	800203e <HAL_RCC_OscConfig+0x103a>
 8001da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001daa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001dae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	fa93 f2a3 	rbit	r2, r3
 8001dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001dca:	601a      	str	r2, [r3, #0]
  return result;
 8001dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001dd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dde:	d802      	bhi.n	8001de6 <HAL_RCC_OscConfig+0xde2>
 8001de0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fdc <HAL_RCC_OscConfig+0xfd8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	e027      	b.n	8001e36 <HAL_RCC_OscConfig+0xe32>
 8001de6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f2a3 	rbit	r2, r3
 8001e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e06:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e10:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	4b6a      	ldr	r3, [pc, #424]	@ (8001fdc <HAL_RCC_OscConfig+0xfd8>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e3a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e3e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e42:	6011      	str	r1, [r2, #0]
 8001e44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e48:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	fa92 f1a2 	rbit	r1, r2
 8001e52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e56:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001e5a:	6011      	str	r1, [r2, #0]
  return result;
 8001e5c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e60:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f042 0220 	orr.w	r2, r2, #32
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f002 021f 	and.w	r2, r2, #31
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d087      	beq.n	8001d92 <HAL_RCC_OscConfig+0xd8e>
 8001e82:	e0db      	b.n	800203c <HAL_RCC_OscConfig+0x1038>
 8001e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e88:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e96:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	fa93 f2a3 	rbit	r2, r3
 8001ea0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ea8:	601a      	str	r2, [r3, #0]
  return result;
 8001eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001eb2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ebe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7fe fdef 	bl	8000aac <HAL_GetTick>
 8001ece:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed2:	e009      	b.n	8001ee8 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7fe fdea 	bl	8000aac <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e0aa      	b.n	800203e <HAL_RCC_OscConfig+0x103a>
 8001ee8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eec:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ef0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f08:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f0c:	601a      	str	r2, [r3, #0]
  return result;
 8001f0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f12:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f20:	d802      	bhi.n	8001f28 <HAL_RCC_OscConfig+0xf24>
 8001f22:	4b2e      	ldr	r3, [pc, #184]	@ (8001fdc <HAL_RCC_OscConfig+0xfd8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	e027      	b.n	8001f78 <HAL_RCC_OscConfig+0xf74>
 8001f28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001f30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f48:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f52:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f60:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <HAL_RCC_OscConfig+0xfd8>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f7c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f80:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f84:	6011      	str	r1, [r2, #0]
 8001f86:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f8a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	fa92 f1a2 	rbit	r1, r2
 8001f94:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f98:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001f9c:	6011      	str	r1, [r2, #0]
  return result;
 8001f9e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fa2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	fab2 f282 	clz	r2, r2
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	f042 0220 	orr.w	r2, r2, #32
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	f002 021f 	and.w	r2, r2, #31
 8001fb8:	2101      	movs	r1, #1
 8001fba:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d187      	bne.n	8001ed4 <HAL_RCC_OscConfig+0xed0>
 8001fc4:	e03a      	b.n	800203c <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d104      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e031      	b.n	800203e <HAL_RCC_OscConfig+0x103a>
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_RCC_OscConfig+0x1044>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	@ (8002048 <HAL_RCC_OscConfig+0x1044>)
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ff0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ff4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001ff8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ffc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	429a      	cmp	r2, r3
 8002006:	d117      	bne.n	8002038 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002008:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800200c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002010:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002014:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800201c:	429a      	cmp	r2, r3
 800201e:	d10b      	bne.n	8002038 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002024:	f003 020f 	and.w	r2, r3, #15
 8002028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000

0800204c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b09e      	sub	sp, #120	@ 0x78
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e154      	b.n	800230e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b89      	ldr	r3, [pc, #548]	@ (800228c <HAL_RCC_ClockConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d910      	bls.n	8002094 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b86      	ldr	r3, [pc, #536]	@ (800228c <HAL_RCC_ClockConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4984      	ldr	r1, [pc, #528]	@ (800228c <HAL_RCC_ClockConfig+0x240>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b82      	ldr	r3, [pc, #520]	@ (800228c <HAL_RCC_ClockConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e13c      	b.n	800230e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4978      	ldr	r1, [pc, #480]	@ (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80cd 	beq.w	800225a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d137      	bne.n	8002138 <HAL_RCC_ClockConfig+0xec>
 80020c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80020d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b3f      	cmp	r3, #63	@ 0x3f
 80020e0:	d802      	bhi.n	80020e8 <HAL_RCC_ClockConfig+0x9c>
 80020e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_ClockConfig+0xbc>
 80020e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80020f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80020fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002104:	4b62      	ldr	r3, [pc, #392]	@ (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800210c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800210e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002116:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002118:	fab2 f282 	clz	r2, r2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f042 0220 	orr.w	r2, r2, #32
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f002 021f 	and.w	r2, r2, #31
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d171      	bne.n	8002218 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0ea      	b.n	800230e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d137      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x164>
 8002140:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002144:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800214e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b3f      	cmp	r3, #63	@ 0x3f
 8002158:	d802      	bhi.n	8002160 <HAL_RCC_ClockConfig+0x114>
 800215a:	4b4d      	ldr	r3, [pc, #308]	@ (8002290 <HAL_RCC_ClockConfig+0x244>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	e00f      	b.n	8002180 <HAL_RCC_ClockConfig+0x134>
 8002160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002164:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	647b      	str	r3, [r7, #68]	@ 0x44
 800216e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002172:	643b      	str	r3, [r7, #64]	@ 0x40
 8002174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800217c:	4b44      	ldr	r3, [pc, #272]	@ (8002290 <HAL_RCC_ClockConfig+0x244>)
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002184:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002186:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800218e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f042 0220 	orr.w	r2, r2, #32
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f002 021f 	and.w	r2, r2, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f202 	lsl.w	r2, r1, r2
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d135      	bne.n	8002218 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0ae      	b.n	800230e <HAL_RCC_ClockConfig+0x2c2>
 80021b0:	2302      	movs	r3, #2
 80021b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80021bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80021c6:	d802      	bhi.n	80021ce <HAL_RCC_ClockConfig+0x182>
 80021c8:	4b31      	ldr	r3, [pc, #196]	@ (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	e00d      	b.n	80021ea <HAL_RCC_ClockConfig+0x19e>
 80021ce:	2302      	movs	r3, #2
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021da:	2302      	movs	r3, #2
 80021dc:	623b      	str	r3, [r7, #32]
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	2202      	movs	r2, #2
 80021ec:	61ba      	str	r2, [r7, #24]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	fa92 f2a2 	rbit	r2, r2
 80021f4:	617a      	str	r2, [r7, #20]
  return result;
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	fab2 f282 	clz	r2, r2
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f042 0220 	orr.w	r2, r2, #32
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	f002 021f 	and.w	r2, r2, #31
 8002208:	2101      	movs	r1, #1
 800220a:	fa01 f202 	lsl.w	r2, r1, r2
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e07a      	b.n	800230e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002218:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <HAL_RCC_ClockConfig+0x244>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 0203 	bic.w	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	491a      	ldr	r1, [pc, #104]	@ (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800222a:	f7fe fc3f 	bl	8000aac <HAL_GetTick>
 800222e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002230:	e00a      	b.n	8002248 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002232:	f7fe fc3b 	bl	8000aac <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e062      	b.n	800230e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002248:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <HAL_RCC_ClockConfig+0x244>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 020c 	and.w	r2, r3, #12
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	429a      	cmp	r2, r3
 8002258:	d1eb      	bne.n	8002232 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800225a:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <HAL_RCC_ClockConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d215      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <HAL_RCC_ClockConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 0207 	bic.w	r2, r3, #7
 8002270:	4906      	ldr	r1, [pc, #24]	@ (800228c <HAL_RCC_ClockConfig+0x240>)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <HAL_RCC_ClockConfig+0x240>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d006      	beq.n	8002294 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e041      	b.n	800230e <HAL_RCC_ClockConfig+0x2c2>
 800228a:	bf00      	nop
 800228c:	40022000 	.word	0x40022000
 8002290:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <HAL_RCC_ClockConfig+0x2cc>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	491a      	ldr	r1, [pc, #104]	@ (8002318 <HAL_RCC_ClockConfig+0x2cc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022be:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <HAL_RCC_ClockConfig+0x2cc>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4912      	ldr	r1, [pc, #72]	@ (8002318 <HAL_RCC_ClockConfig+0x2cc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022d2:	f000 f829 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022d6:	4601      	mov	r1, r0
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <HAL_RCC_ClockConfig+0x2cc>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022e0:	22f0      	movs	r2, #240	@ 0xf0
 80022e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	fa92 f2a2 	rbit	r2, r2
 80022ea:	60fa      	str	r2, [r7, #12]
  return result;
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	fab2 f282 	clz	r2, r2
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	40d3      	lsrs	r3, r2
 80022f6:	4a09      	ldr	r2, [pc, #36]	@ (800231c <HAL_RCC_ClockConfig+0x2d0>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	fa21 f303 	lsr.w	r3, r1, r3
 80022fe:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <HAL_RCC_ClockConfig+0x2d4>)
 8002300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002302:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <HAL_RCC_ClockConfig+0x2d8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fb8c 	bl	8000a24 <HAL_InitTick>
  
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3778      	adds	r7, #120	@ 0x78
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	080043c8 	.word	0x080043c8
 8002320:	20000000 	.word	0x20000000
 8002324:	20000004 	.word	0x20000004

08002328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002342:	4b1f      	ldr	r3, [pc, #124]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d002      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x30>
 8002352:	2b08      	cmp	r3, #8
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x36>
 8002356:	e029      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002358:	4b1a      	ldr	r3, [pc, #104]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800235a:	613b      	str	r3, [r7, #16]
      break;
 800235c:	e029      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	0c9b      	lsrs	r3, r3, #18
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	4a18      	ldr	r2, [pc, #96]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002368:	5cd3      	ldrb	r3, [r2, r3]
 800236a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800236c:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	4a15      	ldr	r2, [pc, #84]	@ (80023cc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002384:	4a0f      	ldr	r2, [pc, #60]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	fbb2 f2f3 	udiv	r2, r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	e007      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002396:	4a0b      	ldr	r2, [pc, #44]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	fbb2 f2f3 	udiv	r2, r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	613b      	str	r3, [r7, #16]
      break;
 80023aa:	e002      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023ae:	613b      	str	r3, [r7, #16]
      break;
 80023b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b2:	693b      	ldr	r3, [r7, #16]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40021000 	.word	0x40021000
 80023c4:	007a1200 	.word	0x007a1200
 80023c8:	080043e0 	.word	0x080043e0
 80023cc:	080043f0 	.word	0x080043f0

080023d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000000 	.word	0x20000000

080023e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023ee:	f7ff ffef 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023f2:	4601      	mov	r1, r0
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023fc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002400:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	603a      	str	r2, [r7, #0]
  return result;
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	080043d8 	.word	0x080043d8

0800242c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002432:	f7ff ffcd 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 8002436:	4601      	mov	r1, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002440:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002444:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	fa92 f2a2 	rbit	r2, r2
 800244c:	603a      	str	r2, [r7, #0]
  return result;
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	fab2 f282 	clz	r2, r2
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	40d3      	lsrs	r3, r2
 8002458:	4a04      	ldr	r2, [pc, #16]	@ (800246c <HAL_RCC_GetPCLK2Freq+0x40>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	080043d8 	.word	0x080043d8

08002470 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b092      	sub	sp, #72	@ 0x48
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80d2 	beq.w	8002638 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002494:	4b4d      	ldr	r3, [pc, #308]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10e      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	4b4a      	ldr	r3, [pc, #296]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	4a49      	ldr	r2, [pc, #292]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	61d3      	str	r3, [r2, #28]
 80024ac:	4b47      	ldr	r3, [pc, #284]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b44      	ldr	r3, [pc, #272]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b41      	ldr	r3, [pc, #260]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a40      	ldr	r2, [pc, #256]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7fe fae9 	bl	8000aac <HAL_GetTick>
 80024da:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7fe fae5 	bl	8000aac <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	@ 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1d4      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b37      	ldr	r3, [pc, #220]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024fc:	4b33      	ldr	r3, [pc, #204]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002504:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8082 	beq.w	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002516:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002518:	429a      	cmp	r2, r3
 800251a:	d07a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800251c:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002526:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800252a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	4b25      	ldr	r3, [pc, #148]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	461a      	mov	r2, r3
 8002546:	2301      	movs	r3, #1
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800254e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	461a      	mov	r2, r3
 800256a:	2300      	movs	r3, #0
 800256c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800256e:	4a17      	ldr	r2, [pc, #92]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002572:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d049      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe fa95 	bl	8000aac <HAL_GetTick>
 8002582:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7fe fa91 	bl	8000aac <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e17e      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800259c:	2302      	movs	r3, #2
 800259e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a8:	2302      	movs	r3, #2
 80025aa:	623b      	str	r3, [r7, #32]
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	61fb      	str	r3, [r7, #28]
  return result;
 80025b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80025c6:	4b01      	ldr	r3, [pc, #4]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	e00d      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40007000 	.word	0x40007000
 80025d4:	10908100 	.word	0x10908100
 80025d8:	2302      	movs	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	4b9a      	ldr	r3, [pc, #616]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	2202      	movs	r2, #2
 80025ea:	613a      	str	r2, [r7, #16]
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	fa92 f2a2 	rbit	r2, r2
 80025f2:	60fa      	str	r2, [r7, #12]
  return result;
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	fab2 f282 	clz	r2, r2
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f002 021f 	and.w	r2, r2, #31
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f202 	lsl.w	r2, r1, r2
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0b9      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002612:	4b8f      	ldr	r3, [pc, #572]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	498c      	ldr	r1, [pc, #560]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002620:	4313      	orrs	r3, r2
 8002622:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002624:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262c:	4b88      	ldr	r3, [pc, #544]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4a87      	ldr	r2, [pc, #540]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002636:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002644:	4b82      	ldr	r3, [pc, #520]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002648:	f023 0203 	bic.w	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	497f      	ldr	r1, [pc, #508]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002652:	4313      	orrs	r3, r2
 8002654:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002662:	4b7b      	ldr	r3, [pc, #492]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	4978      	ldr	r1, [pc, #480]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002670:	4313      	orrs	r3, r2
 8002672:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002680:	4b73      	ldr	r3, [pc, #460]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	4970      	ldr	r1, [pc, #448]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268e:	4313      	orrs	r3, r2
 8002690:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800269e:	4b6c      	ldr	r3, [pc, #432]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f023 0210 	bic.w	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	4969      	ldr	r1, [pc, #420]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80026bc:	4b64      	ldr	r3, [pc, #400]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c8:	4961      	ldr	r1, [pc, #388]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026da:	4b5d      	ldr	r3, [pc, #372]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f023 0220 	bic.w	r2, r3, #32
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	495a      	ldr	r1, [pc, #360]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026f8:	4b55      	ldr	r3, [pc, #340]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	4952      	ldr	r1, [pc, #328]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002706:	4313      	orrs	r3, r2
 8002708:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002716:	4b4e      	ldr	r3, [pc, #312]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	494b      	ldr	r1, [pc, #300]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002734:	4b46      	ldr	r3, [pc, #280]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002738:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4943      	ldr	r1, [pc, #268]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002742:	4313      	orrs	r3, r2
 8002744:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002752:	4b3f      	ldr	r3, [pc, #252]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	493c      	ldr	r1, [pc, #240]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002770:	4b37      	ldr	r3, [pc, #220]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002774:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277c:	4934      	ldr	r1, [pc, #208]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277e:	4313      	orrs	r3, r2
 8002780:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800278e:	4b30      	ldr	r3, [pc, #192]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002792:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279a:	492d      	ldr	r1, [pc, #180]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027ac:	4b28      	ldr	r3, [pc, #160]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b8:	4925      	ldr	r1, [pc, #148]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027ca:	4b21      	ldr	r3, [pc, #132]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	491e      	ldr	r1, [pc, #120]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f4:	4916      	ldr	r1, [pc, #88]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002806:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002812:	490f      	ldr	r1, [pc, #60]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002824:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002828:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002830:	4907      	ldr	r1, [pc, #28]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	4313      	orrs	r3, r2
 8002834:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002842:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	e002      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002856:	4913      	ldr	r1, [pc, #76]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002858:	4313      	orrs	r3, r2
 800285a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002868:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002874:	490b      	ldr	r1, [pc, #44]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002876:	4313      	orrs	r3, r2
 8002878:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002886:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002892:	4904      	ldr	r1, [pc, #16]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002894:	4313      	orrs	r3, r2
 8002896:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3748      	adds	r7, #72	@ 0x48
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000

080028a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e049      	b.n	800294e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fd ff6c 	bl	80007ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 fb76 	bl	8002fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e049      	b.n	80029fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d106      	bne.n	8002982 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7fd fef5 	bl	800076c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f000 fb1f 	bl	8002fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d109      	bne.n	8002a28 <HAL_TIM_PWM_Start+0x24>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	bf14      	ite	ne
 8002a20:	2301      	movne	r3, #1
 8002a22:	2300      	moveq	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e03c      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x9e>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d109      	bne.n	8002a42 <HAL_TIM_PWM_Start+0x3e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	bf14      	ite	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	2300      	moveq	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	e02f      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x9e>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d109      	bne.n	8002a5c <HAL_TIM_PWM_Start+0x58>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e022      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x9e>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d109      	bne.n	8002a76 <HAL_TIM_PWM_Start+0x72>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	e015      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x9e>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b10      	cmp	r3, #16
 8002a7a:	d109      	bne.n	8002a90 <HAL_TIM_PWM_Start+0x8c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e008      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x9e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e0a1      	b.n	8002bee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_PWM_Start+0xb6>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ab8:	e023      	b.n	8002b02 <HAL_TIM_PWM_Start+0xfe>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_PWM_Start+0xc6>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ac8:	e01b      	b.n	8002b02 <HAL_TIM_PWM_Start+0xfe>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_PWM_Start+0xd6>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ad8:	e013      	b.n	8002b02 <HAL_TIM_PWM_Start+0xfe>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d104      	bne.n	8002aea <HAL_TIM_PWM_Start+0xe6>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ae8:	e00b      	b.n	8002b02 <HAL_TIM_PWM_Start+0xfe>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_PWM_Start+0xf6>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002af8:	e003      	b.n	8002b02 <HAL_TIM_PWM_Start+0xfe>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2201      	movs	r2, #1
 8002b08:	6839      	ldr	r1, [r7, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 feae 	bl	800386c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a38      	ldr	r2, [pc, #224]	@ (8002bf8 <HAL_TIM_PWM_Start+0x1f4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d018      	beq.n	8002b4c <HAL_TIM_PWM_Start+0x148>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a37      	ldr	r2, [pc, #220]	@ (8002bfc <HAL_TIM_PWM_Start+0x1f8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d013      	beq.n	8002b4c <HAL_TIM_PWM_Start+0x148>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a35      	ldr	r2, [pc, #212]	@ (8002c00 <HAL_TIM_PWM_Start+0x1fc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00e      	beq.n	8002b4c <HAL_TIM_PWM_Start+0x148>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a34      	ldr	r2, [pc, #208]	@ (8002c04 <HAL_TIM_PWM_Start+0x200>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d009      	beq.n	8002b4c <HAL_TIM_PWM_Start+0x148>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a32      	ldr	r2, [pc, #200]	@ (8002c08 <HAL_TIM_PWM_Start+0x204>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_TIM_PWM_Start+0x148>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a31      	ldr	r2, [pc, #196]	@ (8002c0c <HAL_TIM_PWM_Start+0x208>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_TIM_PWM_Start+0x14c>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_TIM_PWM_Start+0x14e>
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a23      	ldr	r2, [pc, #140]	@ (8002bf8 <HAL_TIM_PWM_Start+0x1f4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d01d      	beq.n	8002bac <HAL_TIM_PWM_Start+0x1a8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b78:	d018      	beq.n	8002bac <HAL_TIM_PWM_Start+0x1a8>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a24      	ldr	r2, [pc, #144]	@ (8002c10 <HAL_TIM_PWM_Start+0x20c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d013      	beq.n	8002bac <HAL_TIM_PWM_Start+0x1a8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a22      	ldr	r2, [pc, #136]	@ (8002c14 <HAL_TIM_PWM_Start+0x210>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00e      	beq.n	8002bac <HAL_TIM_PWM_Start+0x1a8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1a      	ldr	r2, [pc, #104]	@ (8002bfc <HAL_TIM_PWM_Start+0x1f8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d009      	beq.n	8002bac <HAL_TIM_PWM_Start+0x1a8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a18      	ldr	r2, [pc, #96]	@ (8002c00 <HAL_TIM_PWM_Start+0x1fc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_TIM_PWM_Start+0x1a8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a19      	ldr	r2, [pc, #100]	@ (8002c0c <HAL_TIM_PWM_Start+0x208>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d115      	bne.n	8002bd8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <HAL_TIM_PWM_Start+0x214>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d015      	beq.n	8002bea <HAL_TIM_PWM_Start+0x1e6>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc4:	d011      	beq.n	8002bea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd6:	e008      	b.n	8002bea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e000      	b.n	8002bec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40013400 	.word	0x40013400
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800
 8002c0c:	40015000 	.word	0x40015000
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	00010007 	.word	0x00010007

08002c1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e0ff      	b.n	8002e3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b14      	cmp	r3, #20
 8002c46:	f200 80f0 	bhi.w	8002e2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002ca5 	.word	0x08002ca5
 8002c54:	08002e2b 	.word	0x08002e2b
 8002c58:	08002e2b 	.word	0x08002e2b
 8002c5c:	08002e2b 	.word	0x08002e2b
 8002c60:	08002ce5 	.word	0x08002ce5
 8002c64:	08002e2b 	.word	0x08002e2b
 8002c68:	08002e2b 	.word	0x08002e2b
 8002c6c:	08002e2b 	.word	0x08002e2b
 8002c70:	08002d27 	.word	0x08002d27
 8002c74:	08002e2b 	.word	0x08002e2b
 8002c78:	08002e2b 	.word	0x08002e2b
 8002c7c:	08002e2b 	.word	0x08002e2b
 8002c80:	08002d67 	.word	0x08002d67
 8002c84:	08002e2b 	.word	0x08002e2b
 8002c88:	08002e2b 	.word	0x08002e2b
 8002c8c:	08002e2b 	.word	0x08002e2b
 8002c90:	08002da9 	.word	0x08002da9
 8002c94:	08002e2b 	.word	0x08002e2b
 8002c98:	08002e2b 	.word	0x08002e2b
 8002c9c:	08002e2b 	.word	0x08002e2b
 8002ca0:	08002de9 	.word	0x08002de9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fa3e 	bl	800312c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0208 	orr.w	r2, r2, #8
 8002cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0204 	bic.w	r2, r2, #4
 8002cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6999      	ldr	r1, [r3, #24]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	619a      	str	r2, [r3, #24]
      break;
 8002ce2:	e0a5      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fab8 	bl	8003260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6999      	ldr	r1, [r3, #24]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	021a      	lsls	r2, r3, #8
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	619a      	str	r2, [r3, #24]
      break;
 8002d24:	e084      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fb2b 	bl	8003388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0208 	orr.w	r2, r2, #8
 8002d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0204 	bic.w	r2, r2, #4
 8002d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69d9      	ldr	r1, [r3, #28]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	61da      	str	r2, [r3, #28]
      break;
 8002d64:	e064      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fb9d 	bl	80034ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69d9      	ldr	r1, [r3, #28]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	021a      	lsls	r2, r3, #8
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	61da      	str	r2, [r3, #28]
      break;
 8002da6:	e043      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fbec 	bl	800358c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0208 	orr.w	r2, r2, #8
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0204 	bic.w	r2, r2, #4
 8002dd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002de6:	e023      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fc36 	bl	8003660 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	021a      	lsls	r2, r3, #8
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e28:	e002      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop

08002e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0b6      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x18a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e9c:	d03e      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0xd8>
 8002e9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ea2:	f200 8087 	bhi.w	8002fb4 <HAL_TIM_ConfigClockSource+0x170>
 8002ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eaa:	f000 8086 	beq.w	8002fba <HAL_TIM_ConfigClockSource+0x176>
 8002eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eb2:	d87f      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x170>
 8002eb4:	2b70      	cmp	r3, #112	@ 0x70
 8002eb6:	d01a      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0xaa>
 8002eb8:	2b70      	cmp	r3, #112	@ 0x70
 8002eba:	d87b      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x170>
 8002ebc:	2b60      	cmp	r3, #96	@ 0x60
 8002ebe:	d050      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x11e>
 8002ec0:	2b60      	cmp	r3, #96	@ 0x60
 8002ec2:	d877      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x170>
 8002ec4:	2b50      	cmp	r3, #80	@ 0x50
 8002ec6:	d03c      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0xfe>
 8002ec8:	2b50      	cmp	r3, #80	@ 0x50
 8002eca:	d873      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x170>
 8002ecc:	2b40      	cmp	r3, #64	@ 0x40
 8002ece:	d058      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0x13e>
 8002ed0:	2b40      	cmp	r3, #64	@ 0x40
 8002ed2:	d86f      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x170>
 8002ed4:	2b30      	cmp	r3, #48	@ 0x30
 8002ed6:	d064      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8002ed8:	2b30      	cmp	r3, #48	@ 0x30
 8002eda:	d86b      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x170>
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d060      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d867      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x170>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d05c      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d05a      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8002eec:	e062      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002efe:	f000 fc95 	bl	800382c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	609a      	str	r2, [r3, #8]
      break;
 8002f1a:	e04f      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f2c:	f000 fc7e 	bl	800382c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f3e:	609a      	str	r2, [r3, #8]
      break;
 8002f40:	e03c      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f000 fbf2 	bl	8003738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2150      	movs	r1, #80	@ 0x50
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fc4b 	bl	80037f6 <TIM_ITRx_SetConfig>
      break;
 8002f60:	e02c      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f000 fc11 	bl	8003796 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2160      	movs	r1, #96	@ 0x60
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fc3b 	bl	80037f6 <TIM_ITRx_SetConfig>
      break;
 8002f80:	e01c      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f000 fbd2 	bl	8003738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2140      	movs	r1, #64	@ 0x40
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fc2b 	bl	80037f6 <TIM_ITRx_SetConfig>
      break;
 8002fa0:	e00c      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4619      	mov	r1, r3
 8002fac:	4610      	mov	r0, r2
 8002fae:	f000 fc22 	bl	80037f6 <TIM_ITRx_SetConfig>
      break;
 8002fb2:	e003      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb8:	e000      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002fba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a48      	ldr	r2, [pc, #288]	@ (800310c <TIM_Base_SetConfig+0x134>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ff6:	d00f      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a45      	ldr	r2, [pc, #276]	@ (8003110 <TIM_Base_SetConfig+0x138>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a44      	ldr	r2, [pc, #272]	@ (8003114 <TIM_Base_SetConfig+0x13c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a43      	ldr	r2, [pc, #268]	@ (8003118 <TIM_Base_SetConfig+0x140>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a42      	ldr	r2, [pc, #264]	@ (800311c <TIM_Base_SetConfig+0x144>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800301e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a37      	ldr	r2, [pc, #220]	@ (800310c <TIM_Base_SetConfig+0x134>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01f      	beq.n	8003072 <TIM_Base_SetConfig+0x9a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003038:	d01b      	beq.n	8003072 <TIM_Base_SetConfig+0x9a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a34      	ldr	r2, [pc, #208]	@ (8003110 <TIM_Base_SetConfig+0x138>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d017      	beq.n	8003072 <TIM_Base_SetConfig+0x9a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a33      	ldr	r2, [pc, #204]	@ (8003114 <TIM_Base_SetConfig+0x13c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <TIM_Base_SetConfig+0x9a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a32      	ldr	r2, [pc, #200]	@ (8003118 <TIM_Base_SetConfig+0x140>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00f      	beq.n	8003072 <TIM_Base_SetConfig+0x9a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a32      	ldr	r2, [pc, #200]	@ (8003120 <TIM_Base_SetConfig+0x148>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00b      	beq.n	8003072 <TIM_Base_SetConfig+0x9a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a31      	ldr	r2, [pc, #196]	@ (8003124 <TIM_Base_SetConfig+0x14c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d007      	beq.n	8003072 <TIM_Base_SetConfig+0x9a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a30      	ldr	r2, [pc, #192]	@ (8003128 <TIM_Base_SetConfig+0x150>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <TIM_Base_SetConfig+0x9a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a2b      	ldr	r2, [pc, #172]	@ (800311c <TIM_Base_SetConfig+0x144>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d108      	bne.n	8003084 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a18      	ldr	r2, [pc, #96]	@ (800310c <TIM_Base_SetConfig+0x134>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <TIM_Base_SetConfig+0x100>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a19      	ldr	r2, [pc, #100]	@ (8003118 <TIM_Base_SetConfig+0x140>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00f      	beq.n	80030d8 <TIM_Base_SetConfig+0x100>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a19      	ldr	r2, [pc, #100]	@ (8003120 <TIM_Base_SetConfig+0x148>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00b      	beq.n	80030d8 <TIM_Base_SetConfig+0x100>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a18      	ldr	r2, [pc, #96]	@ (8003124 <TIM_Base_SetConfig+0x14c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d007      	beq.n	80030d8 <TIM_Base_SetConfig+0x100>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a17      	ldr	r2, [pc, #92]	@ (8003128 <TIM_Base_SetConfig+0x150>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_Base_SetConfig+0x100>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a12      	ldr	r2, [pc, #72]	@ (800311c <TIM_Base_SetConfig+0x144>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f023 0201 	bic.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	611a      	str	r2, [r3, #16]
  }
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800
 8003118:	40013400 	.word	0x40013400
 800311c:	40015000 	.word	0x40015000
 8003120:	40014000 	.word	0x40014000
 8003124:	40014400 	.word	0x40014400
 8003128:	40014800 	.word	0x40014800

0800312c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f023 0201 	bic.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800315e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0303 	bic.w	r3, r3, #3
 8003166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f023 0302 	bic.w	r3, r3, #2
 8003178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a30      	ldr	r2, [pc, #192]	@ (8003248 <TIM_OC1_SetConfig+0x11c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <TIM_OC1_SetConfig+0x88>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a2f      	ldr	r2, [pc, #188]	@ (800324c <TIM_OC1_SetConfig+0x120>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00f      	beq.n	80031b4 <TIM_OC1_SetConfig+0x88>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a2e      	ldr	r2, [pc, #184]	@ (8003250 <TIM_OC1_SetConfig+0x124>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00b      	beq.n	80031b4 <TIM_OC1_SetConfig+0x88>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a2d      	ldr	r2, [pc, #180]	@ (8003254 <TIM_OC1_SetConfig+0x128>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d007      	beq.n	80031b4 <TIM_OC1_SetConfig+0x88>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003258 <TIM_OC1_SetConfig+0x12c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_OC1_SetConfig+0x88>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a2b      	ldr	r2, [pc, #172]	@ (800325c <TIM_OC1_SetConfig+0x130>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d10c      	bne.n	80031ce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f023 0308 	bic.w	r3, r3, #8
 80031ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003248 <TIM_OC1_SetConfig+0x11c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <TIM_OC1_SetConfig+0xd2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1c      	ldr	r2, [pc, #112]	@ (800324c <TIM_OC1_SetConfig+0x120>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00f      	beq.n	80031fe <TIM_OC1_SetConfig+0xd2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003250 <TIM_OC1_SetConfig+0x124>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00b      	beq.n	80031fe <TIM_OC1_SetConfig+0xd2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a1a      	ldr	r2, [pc, #104]	@ (8003254 <TIM_OC1_SetConfig+0x128>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <TIM_OC1_SetConfig+0xd2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a19      	ldr	r2, [pc, #100]	@ (8003258 <TIM_OC1_SetConfig+0x12c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_OC1_SetConfig+0xd2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a18      	ldr	r2, [pc, #96]	@ (800325c <TIM_OC1_SetConfig+0x130>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d111      	bne.n	8003222 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	621a      	str	r2, [r3, #32]
}
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40013400 	.word	0x40013400
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800
 800325c:	40015000 	.word	0x40015000

08003260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f023 0210 	bic.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800328e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800329a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f023 0320 	bic.w	r3, r3, #32
 80032ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a2c      	ldr	r2, [pc, #176]	@ (8003370 <TIM_OC2_SetConfig+0x110>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d007      	beq.n	80032d4 <TIM_OC2_SetConfig+0x74>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003374 <TIM_OC2_SetConfig+0x114>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d003      	beq.n	80032d4 <TIM_OC2_SetConfig+0x74>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003378 <TIM_OC2_SetConfig+0x118>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d10d      	bne.n	80032f0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003370 <TIM_OC2_SetConfig+0x110>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <TIM_OC2_SetConfig+0xc0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003374 <TIM_OC2_SetConfig+0x114>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00f      	beq.n	8003320 <TIM_OC2_SetConfig+0xc0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a1e      	ldr	r2, [pc, #120]	@ (800337c <TIM_OC2_SetConfig+0x11c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00b      	beq.n	8003320 <TIM_OC2_SetConfig+0xc0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <TIM_OC2_SetConfig+0x120>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d007      	beq.n	8003320 <TIM_OC2_SetConfig+0xc0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <TIM_OC2_SetConfig+0x124>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_OC2_SetConfig+0xc0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a17      	ldr	r2, [pc, #92]	@ (8003378 <TIM_OC2_SetConfig+0x118>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d113      	bne.n	8003348 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003326:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800332e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40012c00 	.word	0x40012c00
 8003374:	40013400 	.word	0x40013400
 8003378:	40015000 	.word	0x40015000
 800337c:	40014000 	.word	0x40014000
 8003380:	40014400 	.word	0x40014400
 8003384:	40014800 	.word	0x40014800

08003388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0303 	bic.w	r3, r3, #3
 80033c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003494 <TIM_OC3_SetConfig+0x10c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <TIM_OC3_SetConfig+0x72>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003498 <TIM_OC3_SetConfig+0x110>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_OC3_SetConfig+0x72>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a29      	ldr	r2, [pc, #164]	@ (800349c <TIM_OC3_SetConfig+0x114>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10d      	bne.n	8003416 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003414:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1e      	ldr	r2, [pc, #120]	@ (8003494 <TIM_OC3_SetConfig+0x10c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <TIM_OC3_SetConfig+0xbe>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1d      	ldr	r2, [pc, #116]	@ (8003498 <TIM_OC3_SetConfig+0x110>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00f      	beq.n	8003446 <TIM_OC3_SetConfig+0xbe>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1d      	ldr	r2, [pc, #116]	@ (80034a0 <TIM_OC3_SetConfig+0x118>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00b      	beq.n	8003446 <TIM_OC3_SetConfig+0xbe>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <TIM_OC3_SetConfig+0x11c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <TIM_OC3_SetConfig+0xbe>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <TIM_OC3_SetConfig+0x120>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_OC3_SetConfig+0xbe>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a16      	ldr	r2, [pc, #88]	@ (800349c <TIM_OC3_SetConfig+0x114>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d113      	bne.n	800346e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800344c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40013400 	.word	0x40013400
 800349c:	40015000 	.word	0x40015000
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800

080034ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	031b      	lsls	r3, r3, #12
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a1a      	ldr	r2, [pc, #104]	@ (8003574 <TIM_OC4_SetConfig+0xc8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <TIM_OC4_SetConfig+0x8c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a19      	ldr	r2, [pc, #100]	@ (8003578 <TIM_OC4_SetConfig+0xcc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00f      	beq.n	8003538 <TIM_OC4_SetConfig+0x8c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a18      	ldr	r2, [pc, #96]	@ (800357c <TIM_OC4_SetConfig+0xd0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00b      	beq.n	8003538 <TIM_OC4_SetConfig+0x8c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a17      	ldr	r2, [pc, #92]	@ (8003580 <TIM_OC4_SetConfig+0xd4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <TIM_OC4_SetConfig+0x8c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a16      	ldr	r2, [pc, #88]	@ (8003584 <TIM_OC4_SetConfig+0xd8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_OC4_SetConfig+0x8c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <TIM_OC4_SetConfig+0xdc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d109      	bne.n	800354c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800353e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	019b      	lsls	r3, r3, #6
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	621a      	str	r2, [r3, #32]
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40013400 	.word	0x40013400
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800
 8003588:	40015000 	.word	0x40015000

0800358c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80035d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a19      	ldr	r2, [pc, #100]	@ (8003648 <TIM_OC5_SetConfig+0xbc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <TIM_OC5_SetConfig+0x82>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a18      	ldr	r2, [pc, #96]	@ (800364c <TIM_OC5_SetConfig+0xc0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00f      	beq.n	800360e <TIM_OC5_SetConfig+0x82>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a17      	ldr	r2, [pc, #92]	@ (8003650 <TIM_OC5_SetConfig+0xc4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00b      	beq.n	800360e <TIM_OC5_SetConfig+0x82>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <TIM_OC5_SetConfig+0xc8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <TIM_OC5_SetConfig+0x82>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a15      	ldr	r2, [pc, #84]	@ (8003658 <TIM_OC5_SetConfig+0xcc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <TIM_OC5_SetConfig+0x82>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a14      	ldr	r2, [pc, #80]	@ (800365c <TIM_OC5_SetConfig+0xd0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d109      	bne.n	8003622 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003614:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	621a      	str	r2, [r3, #32]
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40013400 	.word	0x40013400
 8003650:	40014000 	.word	0x40014000
 8003654:	40014400 	.word	0x40014400
 8003658:	40014800 	.word	0x40014800
 800365c:	40015000 	.word	0x40015000

08003660 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800368e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	051b      	lsls	r3, r3, #20
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003720 <TIM_OC6_SetConfig+0xc0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d013      	beq.n	80036e4 <TIM_OC6_SetConfig+0x84>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a19      	ldr	r2, [pc, #100]	@ (8003724 <TIM_OC6_SetConfig+0xc4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00f      	beq.n	80036e4 <TIM_OC6_SetConfig+0x84>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a18      	ldr	r2, [pc, #96]	@ (8003728 <TIM_OC6_SetConfig+0xc8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00b      	beq.n	80036e4 <TIM_OC6_SetConfig+0x84>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a17      	ldr	r2, [pc, #92]	@ (800372c <TIM_OC6_SetConfig+0xcc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d007      	beq.n	80036e4 <TIM_OC6_SetConfig+0x84>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a16      	ldr	r2, [pc, #88]	@ (8003730 <TIM_OC6_SetConfig+0xd0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_OC6_SetConfig+0x84>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a15      	ldr	r2, [pc, #84]	@ (8003734 <TIM_OC6_SetConfig+0xd4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d109      	bne.n	80036f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	029b      	lsls	r3, r3, #10
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40013400 	.word	0x40013400
 8003728:	40014000 	.word	0x40014000
 800372c:	40014400 	.word	0x40014400
 8003730:	40014800 	.word	0x40014800
 8003734:	40015000 	.word	0x40015000

08003738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	f023 0201 	bic.w	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f023 030a 	bic.w	r3, r3, #10
 8003774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003796:	b480      	push	{r7}
 8003798:	b087      	sub	sp, #28
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f023 0210 	bic.w	r2, r3, #16
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	031b      	lsls	r3, r3, #12
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	621a      	str	r2, [r3, #32]
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	f043 0307 	orr.w	r3, r3, #7
 8003818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	021a      	lsls	r2, r3, #8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	431a      	orrs	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4313      	orrs	r3, r2
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	609a      	str	r2, [r3, #8]
}
 8003860:	bf00      	nop
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2201      	movs	r2, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1a      	ldr	r2, [r3, #32]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	43db      	mvns	r3, r3
 800388e:	401a      	ands	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	431a      	orrs	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e06d      	b.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a30      	ldr	r2, [pc, #192]	@ (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2f      	ldr	r2, [pc, #188]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2d      	ldr	r2, [pc, #180]	@ (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d108      	bne.n	8003920 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003914:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1e      	ldr	r2, [pc, #120]	@ (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d01d      	beq.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394c:	d018      	beq.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	@ (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a15      	ldr	r2, [pc, #84]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a16      	ldr	r2, [pc, #88]	@ (80039cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a11      	ldr	r2, [pc, #68]	@ (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d10c      	bne.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003986:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	4313      	orrs	r3, r2
 8003990:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40013400 	.word	0x40013400
 80039c0:	40015000 	.word	0x40015000
 80039c4:	40000400 	.word	0x40000400
 80039c8:	40000800 	.word	0x40000800
 80039cc:	40014000 	.word	0x40014000

080039d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e06a      	b.n	8003ac2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a19      	ldr	r2, [pc, #100]	@ (8003ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d009      	beq.n	8003a84 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a17      	ldr	r2, [pc, #92]	@ (8003ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d004      	beq.n	8003a84 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a16      	ldr	r2, [pc, #88]	@ (8003ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d115      	bne.n	8003ab0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	051b      	lsls	r3, r3, #20
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40013400 	.word	0x40013400
 8003ad8:	40015000 	.word	0x40015000

08003adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e040      	b.n	8003b70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fc fecc 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	@ 0x24
 8003b08:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f9fc 	bl	8003f20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f825 	bl	8003b78 <UART_SetConfig>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e01b      	b.n	8003b70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fa7b 	bl	8004064 <UART_CheckIdleState>
 8003b6e:	4603      	mov	r3, r0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b92      	ldr	r3, [pc, #584]	@ (8003dec <UART_SetConfig+0x274>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	6979      	ldr	r1, [r7, #20]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a80      	ldr	r2, [pc, #512]	@ (8003df0 <UART_SetConfig+0x278>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d120      	bne.n	8003c36 <UART_SetConfig+0xbe>
 8003bf4:	4b7f      	ldr	r3, [pc, #508]	@ (8003df4 <UART_SetConfig+0x27c>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d817      	bhi.n	8003c30 <UART_SetConfig+0xb8>
 8003c00:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <UART_SetConfig+0x90>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c25 	.word	0x08003c25
 8003c10:	08003c2b 	.word	0x08003c2b
 8003c14:	08003c1f 	.word	0x08003c1f
 8003c18:	2301      	movs	r3, #1
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e0b5      	b.n	8003d8a <UART_SetConfig+0x212>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e0b2      	b.n	8003d8a <UART_SetConfig+0x212>
 8003c24:	2304      	movs	r3, #4
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e0af      	b.n	8003d8a <UART_SetConfig+0x212>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e0ac      	b.n	8003d8a <UART_SetConfig+0x212>
 8003c30:	2310      	movs	r3, #16
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e0a9      	b.n	8003d8a <UART_SetConfig+0x212>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6f      	ldr	r2, [pc, #444]	@ (8003df8 <UART_SetConfig+0x280>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d124      	bne.n	8003c8a <UART_SetConfig+0x112>
 8003c40:	4b6c      	ldr	r3, [pc, #432]	@ (8003df4 <UART_SetConfig+0x27c>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c4c:	d011      	beq.n	8003c72 <UART_SetConfig+0xfa>
 8003c4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c52:	d817      	bhi.n	8003c84 <UART_SetConfig+0x10c>
 8003c54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c58:	d011      	beq.n	8003c7e <UART_SetConfig+0x106>
 8003c5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c5e:	d811      	bhi.n	8003c84 <UART_SetConfig+0x10c>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <UART_SetConfig+0xf4>
 8003c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c68:	d006      	beq.n	8003c78 <UART_SetConfig+0x100>
 8003c6a:	e00b      	b.n	8003c84 <UART_SetConfig+0x10c>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e08b      	b.n	8003d8a <UART_SetConfig+0x212>
 8003c72:	2302      	movs	r3, #2
 8003c74:	77fb      	strb	r3, [r7, #31]
 8003c76:	e088      	b.n	8003d8a <UART_SetConfig+0x212>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e085      	b.n	8003d8a <UART_SetConfig+0x212>
 8003c7e:	2308      	movs	r3, #8
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e082      	b.n	8003d8a <UART_SetConfig+0x212>
 8003c84:	2310      	movs	r3, #16
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e07f      	b.n	8003d8a <UART_SetConfig+0x212>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a5b      	ldr	r2, [pc, #364]	@ (8003dfc <UART_SetConfig+0x284>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d124      	bne.n	8003cde <UART_SetConfig+0x166>
 8003c94:	4b57      	ldr	r3, [pc, #348]	@ (8003df4 <UART_SetConfig+0x27c>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003c9c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ca0:	d011      	beq.n	8003cc6 <UART_SetConfig+0x14e>
 8003ca2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ca6:	d817      	bhi.n	8003cd8 <UART_SetConfig+0x160>
 8003ca8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003cac:	d011      	beq.n	8003cd2 <UART_SetConfig+0x15a>
 8003cae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003cb2:	d811      	bhi.n	8003cd8 <UART_SetConfig+0x160>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <UART_SetConfig+0x148>
 8003cb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cbc:	d006      	beq.n	8003ccc <UART_SetConfig+0x154>
 8003cbe:	e00b      	b.n	8003cd8 <UART_SetConfig+0x160>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e061      	b.n	8003d8a <UART_SetConfig+0x212>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e05e      	b.n	8003d8a <UART_SetConfig+0x212>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e05b      	b.n	8003d8a <UART_SetConfig+0x212>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e058      	b.n	8003d8a <UART_SetConfig+0x212>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e055      	b.n	8003d8a <UART_SetConfig+0x212>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a47      	ldr	r2, [pc, #284]	@ (8003e00 <UART_SetConfig+0x288>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d124      	bne.n	8003d32 <UART_SetConfig+0x1ba>
 8003ce8:	4b42      	ldr	r3, [pc, #264]	@ (8003df4 <UART_SetConfig+0x27c>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003cf0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cf4:	d011      	beq.n	8003d1a <UART_SetConfig+0x1a2>
 8003cf6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cfa:	d817      	bhi.n	8003d2c <UART_SetConfig+0x1b4>
 8003cfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d00:	d011      	beq.n	8003d26 <UART_SetConfig+0x1ae>
 8003d02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d06:	d811      	bhi.n	8003d2c <UART_SetConfig+0x1b4>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <UART_SetConfig+0x19c>
 8003d0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d10:	d006      	beq.n	8003d20 <UART_SetConfig+0x1a8>
 8003d12:	e00b      	b.n	8003d2c <UART_SetConfig+0x1b4>
 8003d14:	2300      	movs	r3, #0
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e037      	b.n	8003d8a <UART_SetConfig+0x212>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e034      	b.n	8003d8a <UART_SetConfig+0x212>
 8003d20:	2304      	movs	r3, #4
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e031      	b.n	8003d8a <UART_SetConfig+0x212>
 8003d26:	2308      	movs	r3, #8
 8003d28:	77fb      	strb	r3, [r7, #31]
 8003d2a:	e02e      	b.n	8003d8a <UART_SetConfig+0x212>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e02b      	b.n	8003d8a <UART_SetConfig+0x212>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a33      	ldr	r2, [pc, #204]	@ (8003e04 <UART_SetConfig+0x28c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d124      	bne.n	8003d86 <UART_SetConfig+0x20e>
 8003d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003df4 <UART_SetConfig+0x27c>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003d44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d48:	d011      	beq.n	8003d6e <UART_SetConfig+0x1f6>
 8003d4a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d4e:	d817      	bhi.n	8003d80 <UART_SetConfig+0x208>
 8003d50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d54:	d011      	beq.n	8003d7a <UART_SetConfig+0x202>
 8003d56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d5a:	d811      	bhi.n	8003d80 <UART_SetConfig+0x208>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <UART_SetConfig+0x1f0>
 8003d60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d64:	d006      	beq.n	8003d74 <UART_SetConfig+0x1fc>
 8003d66:	e00b      	b.n	8003d80 <UART_SetConfig+0x208>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e00d      	b.n	8003d8a <UART_SetConfig+0x212>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e00a      	b.n	8003d8a <UART_SetConfig+0x212>
 8003d74:	2304      	movs	r3, #4
 8003d76:	77fb      	strb	r3, [r7, #31]
 8003d78:	e007      	b.n	8003d8a <UART_SetConfig+0x212>
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	77fb      	strb	r3, [r7, #31]
 8003d7e:	e004      	b.n	8003d8a <UART_SetConfig+0x212>
 8003d80:	2310      	movs	r3, #16
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e001      	b.n	8003d8a <UART_SetConfig+0x212>
 8003d86:	2310      	movs	r3, #16
 8003d88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d92:	d16b      	bne.n	8003e6c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003d94:	7ffb      	ldrb	r3, [r7, #31]
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d838      	bhi.n	8003e0c <UART_SetConfig+0x294>
 8003d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003da0 <UART_SetConfig+0x228>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003dcd 	.word	0x08003dcd
 8003da8:	08003dd5 	.word	0x08003dd5
 8003dac:	08003e0d 	.word	0x08003e0d
 8003db0:	08003ddb 	.word	0x08003ddb
 8003db4:	08003e0d 	.word	0x08003e0d
 8003db8:	08003e0d 	.word	0x08003e0d
 8003dbc:	08003e0d 	.word	0x08003e0d
 8003dc0:	08003de3 	.word	0x08003de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f7fe fb10 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	61b8      	str	r0, [r7, #24]
        break;
 8003dca:	e024      	b.n	8003e16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dcc:	f7fe fb2e 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 8003dd0:	61b8      	str	r0, [r7, #24]
        break;
 8003dd2:	e020      	b.n	8003e16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <UART_SetConfig+0x290>)
 8003dd6:	61bb      	str	r3, [r7, #24]
        break;
 8003dd8:	e01d      	b.n	8003e16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dda:	f7fe faa5 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 8003dde:	61b8      	str	r0, [r7, #24]
        break;
 8003de0:	e019      	b.n	8003e16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003de6:	61bb      	str	r3, [r7, #24]
        break;
 8003de8:	e015      	b.n	8003e16 <UART_SetConfig+0x29e>
 8003dea:	bf00      	nop
 8003dec:	efff69f3 	.word	0xefff69f3
 8003df0:	40013800 	.word	0x40013800
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40004400 	.word	0x40004400
 8003dfc:	40004800 	.word	0x40004800
 8003e00:	40004c00 	.word	0x40004c00
 8003e04:	40005000 	.word	0x40005000
 8003e08:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	77bb      	strb	r3, [r7, #30]
        break;
 8003e14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d073      	beq.n	8003f04 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	005a      	lsls	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	085b      	lsrs	r3, r3, #1
 8003e26:	441a      	add	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b0f      	cmp	r3, #15
 8003e36:	d916      	bls.n	8003e66 <UART_SetConfig+0x2ee>
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e3e:	d212      	bcs.n	8003e66 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f023 030f 	bic.w	r3, r3, #15
 8003e48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	89fb      	ldrh	r3, [r7, #14]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	89fa      	ldrh	r2, [r7, #14]
 8003e62:	60da      	str	r2, [r3, #12]
 8003e64:	e04e      	b.n	8003f04 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	77bb      	strb	r3, [r7, #30]
 8003e6a:	e04b      	b.n	8003f04 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d827      	bhi.n	8003ec2 <UART_SetConfig+0x34a>
 8003e72:	a201      	add	r2, pc, #4	@ (adr r2, 8003e78 <UART_SetConfig+0x300>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	08003ead 	.word	0x08003ead
 8003e84:	08003ec3 	.word	0x08003ec3
 8003e88:	08003eb3 	.word	0x08003eb3
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003ec3 	.word	0x08003ec3
 8003e94:	08003ec3 	.word	0x08003ec3
 8003e98:	08003ebb 	.word	0x08003ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe faa4 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	61b8      	str	r0, [r7, #24]
        break;
 8003ea2:	e013      	b.n	8003ecc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea4:	f7fe fac2 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 8003ea8:	61b8      	str	r0, [r7, #24]
        break;
 8003eaa:	e00f      	b.n	8003ecc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eac:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <UART_SetConfig+0x3a4>)
 8003eae:	61bb      	str	r3, [r7, #24]
        break;
 8003eb0:	e00c      	b.n	8003ecc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb2:	f7fe fa39 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 8003eb6:	61b8      	str	r0, [r7, #24]
        break;
 8003eb8:	e008      	b.n	8003ecc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ebe:	61bb      	str	r3, [r7, #24]
        break;
 8003ec0:	e004      	b.n	8003ecc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eca:	bf00      	nop
    }

    if (pclk != 0U)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d018      	beq.n	8003f04 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	085a      	lsrs	r2, r3, #1
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	441a      	add	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b0f      	cmp	r3, #15
 8003eea:	d909      	bls.n	8003f00 <UART_SetConfig+0x388>
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef2:	d205      	bcs.n	8003f00 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	e001      	b.n	8003f04 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f10:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3720      	adds	r7, #32
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	007a1200 	.word	0x007a1200

08003f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01a      	beq.n	8004036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800401e:	d10a      	bne.n	8004036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  }
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b098      	sub	sp, #96	@ 0x60
 8004068:	af02      	add	r7, sp, #8
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004074:	f7fc fd1a 	bl	8000aac <HAL_GetTick>
 8004078:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d12e      	bne.n	80040e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004090:	2200      	movs	r2, #0
 8004092:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f88c 	bl	80041b4 <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d021      	beq.n	80040e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e6      	bne.n	80040a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e062      	b.n	80041ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d149      	bne.n	8004188 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fc:	2200      	movs	r2, #0
 80040fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f856 	bl	80041b4 <UART_WaitOnFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d03c      	beq.n	8004188 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	623b      	str	r3, [r7, #32]
   return(result);
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800412c:	633b      	str	r3, [r7, #48]	@ 0x30
 800412e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800413a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e6      	bne.n	800410e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3308      	adds	r3, #8
 8004146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3308      	adds	r3, #8
 800415e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004160:	61fa      	str	r2, [r7, #28]
 8004162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	69b9      	ldr	r1, [r7, #24]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	617b      	str	r3, [r7, #20]
   return(result);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e5      	bne.n	8004140 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e011      	b.n	80041ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3758      	adds	r7, #88	@ 0x58
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c4:	e04f      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d04b      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7fc fc6d 	bl	8000aac <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e04e      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d037      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b80      	cmp	r3, #128	@ 0x80
 80041fa:	d034      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b40      	cmp	r3, #64	@ 0x40
 8004200:	d031      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b08      	cmp	r3, #8
 800420e:	d110      	bne.n	8004232 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2208      	movs	r2, #8
 8004216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f838 	bl	800428e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2208      	movs	r2, #8
 8004222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e029      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800423c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004240:	d111      	bne.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800424a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f81e 	bl	800428e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e00f      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	429a      	cmp	r2, r3
 8004282:	d0a0      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800428e:	b480      	push	{r7}
 8004290:	b095      	sub	sp, #84	@ 0x54
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80042b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e6      	bne.n	8004296 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e5      	bne.n	80042c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004300:	2b01      	cmp	r3, #1
 8004302:	d118      	bne.n	8004336 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	60bb      	str	r3, [r7, #8]
   return(result);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f023 0310 	bic.w	r3, r3, #16
 8004318:	647b      	str	r3, [r7, #68]	@ 0x44
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6979      	ldr	r1, [r7, #20]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	613b      	str	r3, [r7, #16]
   return(result);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e6      	bne.n	8004304 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800434a:	bf00      	nop
 800434c:	3754      	adds	r7, #84	@ 0x54
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <memset>:
 8004356:	4402      	add	r2, r0
 8004358:	4603      	mov	r3, r0
 800435a:	4293      	cmp	r3, r2
 800435c:	d100      	bne.n	8004360 <memset+0xa>
 800435e:	4770      	bx	lr
 8004360:	f803 1b01 	strb.w	r1, [r3], #1
 8004364:	e7f9      	b.n	800435a <memset+0x4>
	...

08004368 <__libc_init_array>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	4d0d      	ldr	r5, [pc, #52]	@ (80043a0 <__libc_init_array+0x38>)
 800436c:	4c0d      	ldr	r4, [pc, #52]	@ (80043a4 <__libc_init_array+0x3c>)
 800436e:	1b64      	subs	r4, r4, r5
 8004370:	10a4      	asrs	r4, r4, #2
 8004372:	2600      	movs	r6, #0
 8004374:	42a6      	cmp	r6, r4
 8004376:	d109      	bne.n	800438c <__libc_init_array+0x24>
 8004378:	4d0b      	ldr	r5, [pc, #44]	@ (80043a8 <__libc_init_array+0x40>)
 800437a:	4c0c      	ldr	r4, [pc, #48]	@ (80043ac <__libc_init_array+0x44>)
 800437c:	f000 f818 	bl	80043b0 <_init>
 8004380:	1b64      	subs	r4, r4, r5
 8004382:	10a4      	asrs	r4, r4, #2
 8004384:	2600      	movs	r6, #0
 8004386:	42a6      	cmp	r6, r4
 8004388:	d105      	bne.n	8004396 <__libc_init_array+0x2e>
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004390:	4798      	blx	r3
 8004392:	3601      	adds	r6, #1
 8004394:	e7ee      	b.n	8004374 <__libc_init_array+0xc>
 8004396:	f855 3b04 	ldr.w	r3, [r5], #4
 800439a:	4798      	blx	r3
 800439c:	3601      	adds	r6, #1
 800439e:	e7f2      	b.n	8004386 <__libc_init_array+0x1e>
 80043a0:	08004400 	.word	0x08004400
 80043a4:	08004400 	.word	0x08004400
 80043a8:	08004400 	.word	0x08004400
 80043ac:	08004404 	.word	0x08004404

080043b0 <_init>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	bf00      	nop
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr

080043bc <_fini>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	bf00      	nop
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr
